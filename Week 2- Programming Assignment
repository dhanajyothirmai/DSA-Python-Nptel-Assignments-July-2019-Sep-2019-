1. Write a function intreverse(n) that takes as input a positive integer n and returns the integer obtained by reversing the digits in n.

Here are some examples of how your function should work.

  >>> intreverse(783)
  387
  >>> intreverse(242789)
  987242
  >>> intreverse(3)
  3

Solution :

def intreverse(n):
    rev=0
    while n!=0:
        rev=(rev*10)+(n%10)
        n=n//10
    return rev
    
    
 2.Write a function matched(s) that takes as input a string s and checks if the brackets "(" and ")" in s are matched: that is, every "(" has a matching ")" after it and every ")" has a matching "(" before it. Your function should ignore all other symbols that appear in s. Your function should return True if s has matched brackets and False if it does not.

Here are some examples to show how your function should work.

 
  >>> matched("zb%78")
  True
  >>> matched("(7)(a")
  False
  >>> matched("a)*(?")
  False
  >>> matched("((jkl)78(A)&l(8(dd(FJI:),):)?)")
  True
  
  Solution :
  
  def matched(s):
    j=0
    c=0
    for i in range(0,len(s)):
        
        if s[i]=='(':
            c+=1
        if s[i]==')':
            if c==0:
                return False
            j+=1
    if c==j:
        return True
    else:
        return False
        
3.Write a function sumprimes(l) that takes as input a list of integers l and retuns the sum of all the prime numbers in l.

Here are some examples to show how your function should work.

  >>> sumprimes([3,3,1,13])
  19
  >>> sumprimes([2,4,6,9,11])
  13
  >>> sumprimes([-3,1,6])
  0
  
  Solution :
  
  def  sumprimes(l):
    s=0
    c=1
    for i in range(0,len(l)):
        if l[i]>1:
            for j in range(2,l[i]):
                if l[i]%j!=0:
                    c=1
                    continue
                else:
                    c=0
                    break
            if c==1:
               s=s+l[i]     
    return(s)  
  
    
