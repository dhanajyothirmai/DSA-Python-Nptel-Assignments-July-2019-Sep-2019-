1. Write a function expanding(l) that takes as input a list of integer l and returns True if the absolute difference between each adjacent pair of elements strictly increases.

Here are some examples of how your function should work.

  >>> expanding([1,3,7,2,9])
  True
Explanation: Differences between adjacent elements are 3-1 = 2, 7-3 = 4, 7-2 = 5, 9-2 = 7.

  >>> expanding([1,3,7,2,-3]) 
  False
Explanation: Differences between adjacent elements are 3-1 = 2, 7-3 = 4, 7-2 = 5, 2-(-3) = 5, so not strictly increasing.

  >>> expanding([1,3,7,10])
  False
  
SOLUTION :

def expanding(l):
        diff= l[1]-l[0]
        for i in range(2,len(l)):
            if abs(l[i]-l[i-1])>diff:
                diff=abs(l[i]-l[i-1])
            else:
                return False
        return True    

2.Write a function accordian(l) that takes as input a list of integer l and returns True if the absolute difference between each adjacent pair of elements alternates between increasing strictly and decreasing strictly.

Here are some examples of how your function should work.
  >>> accordian([1,5,1])
  False
Explanation: Differences between adjacent elements are 5-1 = 4, 5-1 = 4, which are equal.

 >>> accordian([1,5,2,8,3])
  True
Explanation: Differences between adjacent elements are 5-1 = 4, 5-2 = 3, 8-2 = 6, 8-3 = 5, so the differences decrease, increase and then decrease.

 >>> accordian([-2,1,5,2,8,3]) 
  True
Explanation: Differences between adjacent elements are 1-(-2) = 3, 5-1 = 4, 5-2 = 3, 8-2 = 6, 8-3 = 5, so the differences increase, decrease, increase and then decrease.

  >>> accordian([1,5,2,8,1])
  False
Explanation: Differences between adjacent elements are 1-(-2) = 3, 5-1 = 4, 5-2 = 3, 8-2 = 6, 8-1 = 7, so the differences increase, decrease, increase and then increase again.
  
SOLUTION :

def accordian(l):
        try:
            diff= abs(l[1]-l[0])
            if abs(l[2]-l[1])>diff:
                flag = True
            else:
                flag = False
        except IndexError:
            return True
        
        for i in range(2,len(l)):
            if flag and  abs(l[i]-l[i-1])>diff:
                      diff=abs(l[i]-l[i-1])
                      flag = not flag 
            elif not flag and abs(l[i]-l[i-1])<diff:            
                      diff=abs(l[i]-l[i-1])
                      flag= not flag
                        
            else:    
                      return False
            
        return True      
       
 3. A square nÃ—n matrix of integers can be written in Python as a list with n elements, where each element is in turn a list of n integers, representing a row of the matrix. For instance, the matrix

  1  2  3
  4  5  6
  7  8  9
would be represented as [[1,2,3], [4,5,6], [7,8,9]].

Write a function rotate(m) that takes a list representation m of a square matrix as input, and returns the matrix obtained by rotating the original matrix clockwize by 90 degrees. For instance, if we rotate the matrix above, we get

  7  4  1
  8  5  2
  9  6  3
Your function should not modify the argument m provided to the function rotate().

Here are some examples of how your function should work.
  >>> rotate([[1,2],[3,4]])
  [[3, 1], [4, 2]]
Explanation:

     1  2    becomes     3  1
     3  4                4  2
  >>> rotate([[1,2,3],[4,5,6],[7,8,9]])
  [[7, 4, 1], [8, 5, 2], [9, 6, 3]]
Explanation:

     1  2  3    becomes   7  4  1
     4  5  6              8  5  2
     7  8  9              9  6  3
  >>> rotate([[1,1,1],[2,2,2],[3,3,3]])
  [[3, 2, 1], [3, 2, 1], [3, 2, 1]]
Explanation:

     1  1  1    becomes   3  2  1
     2  2  2              3  2  1
     3  3  3              3  2  1
     
SOLUTION :

def rotate(m):
    n=[[0 for i in range(len(m))] for i in range(len(m))]
    for i in range(len(m)):
            for j in range(len(m)):
                n[i][j]=m[j][i]
    for i in range(len(n)):
             n[i]=n[i][::-1]
    return n     
        
